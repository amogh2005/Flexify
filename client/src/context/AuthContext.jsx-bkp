import { createContext, useContext, useEffect, useMemo, useState } from 'react'
import { api, setAuthToken } from '../api/client'

const AuthContext = createContext(null)

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null)
  const [role, setRole] = useState(null)
  const [isAuthenticated, setIsAuthenticated] = useState(false)

  useEffect(() => {
    const r = localStorage.getItem('sf_role')
    const u = localStorage.getItem('sf_user')
    const token = localStorage.getItem('sf_token')
    const refreshToken = localStorage.getItem('sf_refresh_token')
    
    if (r && u && token) {
      try {
        setRole(r)
        setUser(JSON.parse(u))
        setIsAuthenticated(true)
        setAuthToken(token)
      } catch (error) {
        console.error('Error parsing stored user data:', error)
        logout()
      }
    }
  }, [])

  const value = useMemo(() => ({
    user,
    role,
    isAuthenticated,
    async login(email, password) {
      try {
        const { data } = await api.post('/auth/login', { email, password })
        setAuthToken(data.accessToken)
        setRole(data.role)
        setUser(data.user)
        setIsAuthenticated(true)
        localStorage.setItem('sf_role', data.role)
        localStorage.setItem('sf_user', JSON.stringify(data.user))
        localStorage.setItem('sf_token', data.accessToken)
        localStorage.setItem('sf_refresh_token', data.refreshToken)
        return data
      } catch (error) {
        throw error
      }
    },
    async refreshToken() {
      try {
        const refreshToken = localStorage.getItem('sf_refresh_token')
        if (!refreshToken) {
          throw new Error('No refresh token available')
        }

        const { data } = await api.post('/auth/refresh', { refreshToken })
        setAuthToken(data.accessToken)
        localStorage.setItem('sf_token', data.accessToken)
        return data.accessToken
      } catch (error) {
        console.error('Token refresh failed:', error)
        logout()
        throw error
      }
    },
    async logout() {
      try {
        // Call logout endpoint if we have a token
        const token = localStorage.getItem('sf_token')
        if (token) {
          await api.post('/auth/logout')
        }
      } catch (error) {
        console.error('Logout API call failed:', error)
      } finally {
        // Always clean up local state
        setAuthToken(null)
        setRole(null)
        setUser(null)
        setIsAuthenticated(false)
        localStorage.removeItem('sf_role')
        localStorage.removeItem('sf_user')
        localStorage.removeItem('sf_token')
        localStorage.removeItem('sf_refresh_token')
      }
    }
  }), [user, role, isAuthenticated])

  return (
    <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
  )
}

export function useAuth() {
  return useContext(AuthContext)
}


